// Code generated by MockGen. DO NOT EDIT.
// Source: redis/redis.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Locking mocks base method.
func (m *MockClient) Locking(path []string, timeout time.Duration, fn func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locking", path, timeout, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Locking indicates an expected call of Locking.
func (mr *MockClientMockRecorder) Locking(path, timeout, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locking", reflect.TypeOf((*MockClient)(nil).Locking), path, timeout, fn)
}

// RepoNameFromJID mocks base method.
func (m *MockClient) RepoNameFromJID(jid string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoNameFromJID", jid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RepoNameFromJID indicates an expected call of RepoNameFromJID.
func (mr *MockClientMockRecorder) RepoNameFromJID(jid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoNameFromJID", reflect.TypeOf((*MockClient)(nil).RepoNameFromJID), jid)
}
