// Code generated by MockGen. DO NOT EDIT.
// Source: storage/provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	api "github.com/cocov-ci/cache/api"
	locator "github.com/cocov-ci/cache/locator"
	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// DeleteArtifact mocks base method.
func (m *MockProvider) DeleteArtifact(locator *locator.ArtifactLocator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifact", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockProviderMockRecorder) DeleteArtifact(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockProvider)(nil).DeleteArtifact), locator)
}

// DeleteTool mocks base method.
func (m *MockProvider) DeleteTool(locator *locator.ToolLocator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTool", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTool indicates an expected call of DeleteTool.
func (mr *MockProviderMockRecorder) DeleteTool(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTool", reflect.TypeOf((*MockProvider)(nil).DeleteTool), locator)
}

// GetArtifact mocks base method.
func (m *MockProvider) GetArtifact(locator *locator.ArtifactLocator) (*api.GetArtifactMetaOutput, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", locator)
	ret0, _ := ret[0].(*api.GetArtifactMetaOutput)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockProviderMockRecorder) GetArtifact(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockProvider)(nil).GetArtifact), locator)
}

// GetArtifactMeta mocks base method.
func (m *MockProvider) GetArtifactMeta(locator *locator.ArtifactLocator) (*api.GetArtifactMetaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactMeta", locator)
	ret0, _ := ret[0].(*api.GetArtifactMetaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactMeta indicates an expected call of GetArtifactMeta.
func (mr *MockProviderMockRecorder) GetArtifactMeta(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactMeta", reflect.TypeOf((*MockProvider)(nil).GetArtifactMeta), locator)
}

// GetTool mocks base method.
func (m *MockProvider) GetTool(locator *locator.ToolLocator) (*api.GetToolMetaOutput, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTool", locator)
	ret0, _ := ret[0].(*api.GetToolMetaOutput)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTool indicates an expected call of GetTool.
func (mr *MockProviderMockRecorder) GetTool(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTool", reflect.TypeOf((*MockProvider)(nil).GetTool), locator)
}

// GetToolMeta mocks base method.
func (m *MockProvider) GetToolMeta(locator *locator.ToolLocator) (*api.GetToolMetaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToolMeta", locator)
	ret0, _ := ret[0].(*api.GetToolMetaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToolMeta indicates an expected call of GetToolMeta.
func (mr *MockProviderMockRecorder) GetToolMeta(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToolMeta", reflect.TypeOf((*MockProvider)(nil).GetToolMeta), locator)
}

// PurgeRepository mocks base method.
func (m *MockProvider) PurgeRepository(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeRepository", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeRepository indicates an expected call of PurgeRepository.
func (mr *MockProviderMockRecorder) PurgeRepository(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeRepository", reflect.TypeOf((*MockProvider)(nil).PurgeRepository), id)
}

// SetArtifact mocks base method.
func (m *MockProvider) SetArtifact(locator *locator.ArtifactLocator, mime string, objectSize int64, stream io.ReadCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArtifact", locator, mime, objectSize, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetArtifact indicates an expected call of SetArtifact.
func (mr *MockProviderMockRecorder) SetArtifact(locator, mime, objectSize, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArtifact", reflect.TypeOf((*MockProvider)(nil).SetArtifact), locator, mime, objectSize, stream)
}

// SetTool mocks base method.
func (m *MockProvider) SetTool(locator *locator.ToolLocator, mime string, objectSize int64, stream io.ReadCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTool", locator, mime, objectSize, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTool indicates an expected call of SetTool.
func (mr *MockProviderMockRecorder) SetTool(locator, mime, objectSize, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTool", reflect.TypeOf((*MockProvider)(nil).SetTool), locator, mime, objectSize, stream)
}

// TouchArtifact mocks base method.
func (m *MockProvider) TouchArtifact(locator *locator.ArtifactLocator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TouchArtifact", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// TouchArtifact indicates an expected call of TouchArtifact.
func (mr *MockProviderMockRecorder) TouchArtifact(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TouchArtifact", reflect.TypeOf((*MockProvider)(nil).TouchArtifact), locator)
}

// TouchTool mocks base method.
func (m *MockProvider) TouchTool(locator *locator.ToolLocator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TouchTool", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// TouchTool indicates an expected call of TouchTool.
func (mr *MockProviderMockRecorder) TouchTool(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TouchTool", reflect.TypeOf((*MockProvider)(nil).TouchTool), locator)
}
