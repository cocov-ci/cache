// Code generated by MockGen. DO NOT EDIT.
// Source: storage/provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	storage "github.com/cocov-ci/cache/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProvider) Delete(locator storage.ObjectDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderMockRecorder) Delete(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProvider)(nil).Delete), locator)
}

// DeleteGroup mocks base method.
func (m *MockProvider) DeleteGroup(locator storage.ObjectDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockProviderMockRecorder) DeleteGroup(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockProvider)(nil).DeleteGroup), locator)
}

// Get mocks base method.
func (m *MockProvider) Get(locator storage.ObjectDescriptor) (*storage.Item, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", locator)
	ret0, _ := ret[0].(*storage.Item)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockProviderMockRecorder) Get(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProvider)(nil).Get), locator)
}

// MetadataOf mocks base method.
func (m *MockProvider) MetadataOf(locator storage.ObjectDescriptor) (*storage.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataOf", locator)
	ret0, _ := ret[0].(*storage.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataOf indicates an expected call of MetadataOf.
func (mr *MockProviderMockRecorder) MetadataOf(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataOf", reflect.TypeOf((*MockProvider)(nil).MetadataOf), locator)
}

// Set mocks base method.
func (m *MockProvider) Set(locator storage.ObjectDescriptor, mime string, objectSize int, stream io.ReadCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", locator, mime, objectSize, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockProviderMockRecorder) Set(locator, mime, objectSize, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockProvider)(nil).Set), locator, mime, objectSize, stream)
}

// TotalSize mocks base method.
func (m *MockProvider) TotalSize(kind storage.Kind) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSize", kind)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSize indicates an expected call of TotalSize.
func (mr *MockProviderMockRecorder) TotalSize(kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSize", reflect.TypeOf((*MockProvider)(nil).TotalSize), kind)
}

// Touch mocks base method.
func (m *MockProvider) Touch(locator storage.ObjectDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Touch", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// Touch indicates an expected call of Touch.
func (mr *MockProviderMockRecorder) Touch(locator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockProvider)(nil).Touch), locator)
}
